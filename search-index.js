var searchIndex = JSON.parse('{\
"bcs":{"doc":"Binary Canonical Serialization (BCS)","t":[13,13,4,13,13,13,13,13,13,13,13,17,17,13,13,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,5,5,0,5,11,11,11,11,11,12,12,12,12,12,5],"n":["Custom","Eof","Error","ExceededContainerDepthLimit","ExceededMaxLen","ExpectedBoolean","ExpectedMapKey","ExpectedMapValue","ExpectedOption","IntegerOverflowDuringUleb128Decoding","Io","MAX_CONTAINER_DEPTH","MAX_SEQUENCE_LENGTH","MissingLen","NonCanonicalMap","NonCanonicalUleb128Encoding","NotSupported","RemainingInput","Result","Utf8","borrow","borrow_mut","clone","clone_into","custom","custom","eq","fmt","fmt","from","from","from_bytes","from_bytes_seed","into","is_human_readable","provide","serialize_into","serialized_size","test_helpers","to_bytes","to_owned","to_string","try_from","try_into","type_id","0","0","0","0","0","assert_canonical_encode_decode"],"q":["bcs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bcs::Error","","","","","bcs::test_helpers"],"d":["","","","","","","","","","","","Maximal allowed depth of BCS data, counting only structs …","Variable length sequences in BCS are limited to max length …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>&amp;[u8]</code> into a type.","Perform a stateful deserialization from a <code>&amp;[u8]</code> using the …","Calls <code>U::from(self)</code>.","","","Same as <code>to_bytes</code> but write directly into an <code>std::io::Write</code> …","Same as <code>to_bytes</code> but only return the size of the …","","Serialize the given data structure as a <code>Vec&lt;u8&gt;</code> of BCS.","","","","","","","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,0,0,1,1,1,1,1,15,16,17,18,19,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[2,1],[2,1],[[1,1],3],[[1,4],5],[[1,4],5],[6,1],[[]],[[],7],[[],7],[[]],[[],3],[8],[[],7],[[],[[7,[9]]]],0,[[],[[7,[[11,[10]]]]]],[[]],[[],12],[[],13],[[],13],[[],14],0,0,0,0,0,[[]]],"p":[[4,"Error"],[8,"Display"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[6,"Result"],[3,"Demand"],[15,"usize"],[15,"u8"],[3,"Vec"],[3,"String"],[4,"Result"],[3,"TypeId"],[13,"Io"],[13,"ExceededMaxLen"],[13,"ExceededContainerDepthLimit"],[13,"Custom"],[13,"NotSupported"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
